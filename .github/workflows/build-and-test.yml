name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build-and-test-cpu-cli:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [g++, clang++, cl]
        exclude:
          - os: ubuntu-latest
            compiler: cl
          - os: macos-latest
            compiler: cl
          - os: windows-latest
            compiler: g++
          - os: windows-latest
            compiler: clang++

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Prep Build
        run: echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV
          
      - name: Build SCAMP
        shell: bash
        run: |
          set -e
          cd $GITHUB_WORKSPACE
          mkdir build && cd build
          cmake ..
          cmake --build . --config Release --parallel 2
          if [ -f "./Release/SCAMP.exe" ]; then
            cp ./Release/SCAMP.exe .
          fi

      - name: Basic Tests SCAMP
        shell: bash
        run: |
          set -e
          cd $GITHUB_WORKSPACE/test
          ./run_tests.sh ../build/SCAMP /dev/null "--no_gpu=true --num_cpu_workers=2"
          
      - name: Extended Tests SCAMP
        shell: bash
        run: |
          set -e
          python3 -m pip install numpy pandas tqdm
          cd $GITHUB_WORKSPACE/test
          python3 ./run_tests.py --executable "../build/SCAMP" --extra_args "--no_gpu --num_cpu_workers=2"
               
  build-and-test-cpu-distributed:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        compiler: [g++, clang++]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Prep Build
        run: |
          echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV
          if [ "${{ matrix.compiler }}" = "g++" ]; then
            echo "CC=gcc" >> $GITHUB_ENV
          elif [ "${{ matrix.compiler }}" = "clang++" ]; then
            echo "CC=clang" >> $GITHUB_ENV
          fi
            
      - name: Build SCAMP Distributed
        shell: bash
        run: |
          set -e
          cd $GITHUB_WORKSPACE
          mkdir build && cd build
          cmake -DBUILD_CLIENT_SERVER=1 ..
          cmake --build . --config Release --parallel 2

      - name: Distributed Tests SCAMP
        shell: bash
        run: |
          set -e
          python3 -m pip install numpy pandas tqdm
          cd $GITHUB_WORKSPACE/test
          ../build/src/distributed/SCAMPserver &
          ../build/src/distributed/SCAMPclient &
          sleep 10
          ./run_tests.sh ../build/src/distributed/SCAMP_distributed /dev/null 
          python3 ./run_tests.py --executable ../build/src/distributed/SCAMP_distributed --matrix_sizes --window_sizes 100 --extra_args "--no_gpu --num_cpu_workers=1 --distributed_tile_size=1500"
    
  build-and-test-cpu-pyscamp:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build pyscamp
        shell: bash
        run: |
          set -e
          cd $GITHUB_WORKSPACE
          python3 setup.py sdist
          python3 -m pip install dist/*
          python3 -m pip install numpy pandas tqdm

      - name: pyscamp Test
        shell: bash
        run: |
          set -e
          cd $GITHUB_WORKSPACE/test
          python3 test_pyscamp.py
          python3 ./run_tests.py --executable pyscamp

  build-cuda-cli:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2019]
        compiler: [g++, clang++, cl]
        exclude:
          - os: ubuntu-latest
            compiler: cl
          - os: windows-latest
            compiler: g++
          - os: windows-latest
            compiler: clang++

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - uses: Jimver/cuda-toolkit@v0.2.5
        id: cuda-toolkit
        with:
          cuda: '11.5.1'

      - name: Prep Build
        run: echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV
        
      - name: Build SCAMP
        shell: bash
        run: |
          set -e
          cd $GITHUB_WORKSPACE
          mkdir build && cd build
          cmake -DFORCE_CUDA=1 ..
          cmake --build . --config Release --parallel 2
